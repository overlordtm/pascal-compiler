package compiler.synanal;

import java_cup.runtime.*;

import compiler.report.*;
import compiler.abstree.tree.*;

parser code
{:
        public void syntax_error(Symbol cur_token) {
            Report.warning ("Syntax error near word '" + (String)(cur_token.value) + "'.", cur_token.left, cur_token.right);
        }
        
        public void report_error(String message, Object info) {
        }
        
        public void report_fatal_error(String message, Object info) throws Exception {
        	throw new Exception(message);
        }
:}

terminal String BOOL_CONST, CHAR_CONST, INT_CONST, NIL;
terminal String IDENTIFIER;

terminal String BOOL, CHAR, INT;
terminal String COLON, COMMA, DOT, DOTS, LBRACKET, LPARENTHESIS, RBRACKET, RPARENTHESIS, SEMIC;
terminal String ADD, AND, DIV, EQU, GEQ, GTH, LEQ, LTH, MEM, MUL, NEQ, NOT, OR, PTR, SUB, UADD, USUB, VAL;
terminal String ARRAY, ASSIGN, BEGIN, CONST, DO, ELSE, END, FOR, FUNCTION, IF, OF, PROCEDURE, PROGRAM, RECORD, THEN, TO, TYPE, VAR, WHILE;

non terminal AbsProgram source;
non terminal AbsBlockStmt main_block;
non terminal AbsValExpr val_expr;
non terminal AbsTypeExpr type_expr;
non terminal AbsStmt stmt;
non terminal AbsStmts stmt_opt;
non terminal AbsIfStmt if_stmt;
non terminal AbsWhileStmt while_stmt;
non terminal AbsForStmt for_stmt;
non terminal AbsDecls const_declarations_opt;
non terminal AbsDecls type_declarations_opt;
non terminal AbsDecls var_declarations_opt;
non terminal AbsDecls subroutine_declarations_opt;
non terminal AbsDecls declarations;
non terminal AbsDecls const_declarations;
non terminal AbsDecls type_declarations;
non terminal AbsDecls var_declarations;
non terminal AbsDecls subroutine_declarations;
non terminal AbsConstDecl const_declaration;
non terminal AbsTypeDecl type_declaration;
non terminal AbsVarDecl var_declaration;
non terminal AbsFunDecl function_declaration;
non terminal AbsProcDecl procedure_declaration;
non terminal AbsValExprs arguments_list;
non terminal AbsValExprs parameters_call;
non terminal AbsDecls components_list;
non terminal AbsTypeDecl component;
non terminal AbsDecls parameters;
non terminal AbsVarDecl parameter;
non terminal String eps;

precedence left AND;
precedence left OR;
precedence left EQU, NEQ;
precedence left GTH, LTH, GEQ, LEQ;
precedence left ADD, SUB;
precedence left MUL, DIV;
precedence left PTR;
precedence nonassoc NOT;
precedence left DOT, LBRACKET, RBRACKET;

start with source;

eps ::= ;

source ::= PROGRAM:prog IDENTIFIER:name SEMIC:s declarations:decls main_block:body
            {:
                AbsDeclName pname = new AbsDeclName(name);
                pname.setPos(name, nameleft, nameright);

                AbsProgram p = new AbsProgram(pname, decls, body);
                p.setBeg(prog, progleft, progright);
                p.setEnd(body);
                RESULT = p;
            :}
        ;

val_expr ::=
            BOOL_CONST:c
            {:
                AbsAtomConst aac = new AbsAtomConst(c, AbsAtomConst.BOOL);
                aac.setPos(c, cleft, cright);
                RESULT = aac;
            :}
        |   CHAR_CONST:c
            {:
                AbsAtomConst aac = new AbsAtomConst(c, AbsAtomConst.CHAR);
                aac.setPos(c, cleft, cright);
                RESULT = aac;
            :}
        |   INT_CONST:c
            {:
                AbsAtomConst aac = new AbsAtomConst(c, AbsAtomConst.INT);
                aac.setPos(c, cleft, cright);
                RESULT = aac;
            :}
        |   NIL:n
            {:
                AbsNilConst anc = new AbsNilConst();
                anc.setPos(n, nleft, nright);
                RESULT = anc;
            :}
        |   PTR:p val_expr:v
            {:
                AbsUnExpr aue = new AbsUnExpr(AbsUnExpr.MEM, v);
                aue.setBeg(p, pleft, pright);
                aue.setEnd(v);
                RESULT = aue;
            :}
        |   ADD:a val_expr:v
            {:
                AbsUnExpr aue = new AbsUnExpr(AbsUnExpr.ADD, v);
                aue.setBeg(a, aleft, aright);
                aue.setEnd(v);
                RESULT = aue;
            :}
        |   SUB:s val_expr:v
            {:
                AbsUnExpr aue = new AbsUnExpr(AbsUnExpr.SUB, v);
                aue.setBeg(s, sleft, sright);
                aue.setEnd(v); 
                RESULT = aue;
            :}
        |   NOT:n val_expr:v
            {:
                AbsUnExpr aue = new AbsUnExpr(AbsUnExpr.NOT, v);
                aue.setBeg(n, nleft, nright);
                aue.setEnd(v);
                RESULT = aue;
            :}
        |   val_expr:v PTR:p
            {:
                AbsUnExpr aue = new AbsUnExpr(AbsUnExpr.VAL, v);
                aue.setBeg(v);
                aue.setEnd(p, pleft, pright);
                RESULT = aue;
            :}
        |   val_expr:v1 MUL val_expr:v2
            {:
                AbsBinExpr abe = new AbsBinExpr(AbsBinExpr.MUL, v1, v2);
                abe.setBeg(v1);
                abe.setEnd(v2);
                RESULT = abe;
            :}
        |   val_expr:v1 DIV val_expr:v2
            {:
                AbsBinExpr abe = new AbsBinExpr(AbsBinExpr.DIV, v1, v2);
                abe.setBeg(v1);
                abe.setEnd(v2);
                RESULT = abe;
            :}
        |   val_expr:v1 ADD val_expr:v2
            {:
                AbsBinExpr abe = new AbsBinExpr(AbsBinExpr.ADD, v1, v2);
                abe.setBeg(v1);
                abe.setEnd(v2);
                RESULT = abe;
            :}
        |   val_expr:v1 SUB val_expr:v2
            {:
                AbsBinExpr abe = new AbsBinExpr(AbsBinExpr.SUB, v1, v2);
                abe.setBeg(v1);
                abe.setEnd(v2);
                RESULT = abe;
            :}
        |   val_expr:v1 EQU val_expr:v2
            {:
                AbsBinExpr abe = new AbsBinExpr(AbsBinExpr.EQU, v1, v2);
                abe.setBeg(v1);
                abe.setEnd(v2);
                RESULT = abe;
            :}
        |   val_expr:v1 NEQ val_expr:v2
            {:
                AbsBinExpr abe = new AbsBinExpr(AbsBinExpr.NEQ, v1, v2);
                abe.setBeg(v1);
                abe.setEnd(v2);
                RESULT = abe;
            :}
        |   val_expr:v1 GTH val_expr:v2
            {:
                AbsBinExpr abe = new AbsBinExpr(AbsBinExpr.GTH, v1, v2);
                abe.setBeg(v1);
                abe.setEnd(v2);
                RESULT = abe;
            :}
        |   val_expr:v1 LTH val_expr:v2
            {:
                AbsBinExpr abe = new AbsBinExpr(AbsBinExpr.LTH, v1, v2);
                abe.setBeg(v1);
                abe.setEnd(v2);
                RESULT = abe;
            :}
        |   val_expr:v1 GEQ val_expr:v2
            {:
                AbsBinExpr abe = new AbsBinExpr(AbsBinExpr.GEQ, v1, v2);
                abe.setBeg(v1);
                abe.setEnd(v2);
                RESULT = abe;
            :}
        |   val_expr:v1 LEQ val_expr:v2
            {:
                AbsBinExpr abe = new AbsBinExpr(AbsBinExpr.LEQ, v1, v2);
                abe.setBeg(v1);
                abe.setEnd(v2);
                RESULT = abe;
            :}
        |   val_expr:v1 AND val_expr:v2
            {:
                AbsBinExpr abe = new AbsBinExpr(AbsBinExpr.AND, v1, v2);
                abe.setBeg(v1);
                abe.setEnd(v2);
                RESULT = abe;
            :}
        |   val_expr:v1 OR val_expr:v2
            {:
                AbsBinExpr abe = new AbsBinExpr(AbsBinExpr.OR, v1, v2);
                abe.setBeg(v1);
                abe.setEnd(v2);
                RESULT = abe;
            :}
        |   val_expr:v1 LBRACKET val_expr:v2 RBRACKET:rb
            {:
                AbsBinExpr abe = new AbsBinExpr(AbsBinExpr.ARRACCESS, v1, v2);
                abe.setBeg(v1);
                abe.setEnd(rb, rbleft, rbright);
                RESULT = abe;
            :}
        |   val_expr:v1 DOT IDENTIFIER:v2
            {:
                AbsBinExpr abe = new AbsBinExpr(AbsBinExpr.RECACCESS, v1, new AbsValName(v2));
                abe.setBeg(v1);
                abe.setEnd(v2, v2left, v2right);
                RESULT = abe;
            :}
        |   IDENTIFIER:name parameters_call:args
            {:
                AbsValName avn = new AbsValName(name);
                avn.setPos(name, nameleft, nameright);

                AbsCallExpr ace = new AbsCallExpr(avn, args);
                ace.setBeg(avn);
                ace.setEnd(args);
                RESULT = ace;
            :}
        |   LBRACKET:lb type_expr:t RBRACKET:rb
            {:
                AbsAlloc aa = new AbsAlloc(t);
                aa.setBeg(lb, lbleft, lbright);
                aa.setEnd(rb, rbleft, rbright);
                RESULT = aa;
            :}
        |   LPARENTHESIS val_expr:v RPARENTHESIS {: RESULT = v; :}
        |   IDENTIFIER:id
            {:
                AbsValName avn = new AbsValName(id);
                avn.setPos(id, idleft, idright);
                RESULT = avn;
            :};
        
type_expr ::=
            BOOL:t
            {:  AbsAtomType aat = new AbsAtomType(AbsAtomType.BOOL);
                aat.setPos(t,tleft,tright);
                RESULT = aat;
            :}
        |   CHAR:t
            {:  AbsAtomType aat = new AbsAtomType(AbsAtomType.CHAR);
                aat.setPos(t,tleft,tright);
                RESULT = aat;
            :}
        |   INT:t
            {:  AbsAtomType aat = new AbsAtomType(AbsAtomType.INT);
                aat.setPos(t,tleft,tright);
                RESULT = aat;
            :}
        |   IDENTIFIER:t
            {:  AbsTypeName atn = new AbsTypeName(t);
                atn.setPos(t,tleft,tright);
                RESULT = atn;
            :}
        |   ARRAY:arr LBRACKET val_expr:v1 DOTS val_expr:v2 RBRACKET OF type_expr:t
            {:
                AbsArrayType aat = new AbsArrayType(t, v1, v2);
                aat.setBeg(arr, arrleft, arrright);
                aat.setEnd(t);
                RESULT = aat;
            :}
        |   RECORD:r components_list:vars END:e
            {:
                AbsRecordType art = new AbsRecordType(vars);
                art.setBeg(r, rleft, rright);
                art.setEnd(e, eleft, eright);
                RESULT = art;
            :}
        |   PTR:p type_expr:t
            {:
                AbsPointerType apt = new AbsPointerType(t);
                apt.setBeg(p, pleft, pright);
                apt.setEnd(t);
                RESULT = apt;
            :}
        |   LPARENTHESIS type_expr:t RPARENTHESIS
            {:
                RESULT = t;
            :}
        ;

components_list ::=
            components_list:ad SEMIC component:c
            {:
                ad.decls.add(c);
                ad.setEnd(c);
                RESULT = ad;
            :}
        |   component:c
            {:
                AbsDecls ad = new AbsDecls();
                ad.decls.add(0, c);
                ad.setBeg(c);
                ad.setEnd(c);
                RESULT = ad;
            :};

component ::=
            IDENTIFIER:n COLON type_expr:type
            {:
                AbsDeclName adn = new AbsDeclName(n);
                adn.setPos(n, nleft, nright);

                AbsTypeDecl atd = new AbsTypeDecl(adn, type);
                atd.setBeg(adn);
                atd.setEnd(type);
                RESULT = atd;
            :};

parameters_call ::= LPARENTHESIS arguments_list:vals RPARENTHESIS {: RESULT = vals; :};

arguments_list ::=
            eps:e
            {:
                AbsValExprs aves = new AbsValExprs();
                aves.setPos("", eleft, eright);
                RESULT = aves;
            :}
        |   val_expr:e COMMA arguments_list:aves
            {:
                aves.exprs.add(0, e);
                aves.setBeg(e);
                RESULT = aves;
            :}
        |   val_expr:e
            {:
                AbsValExprs aves = new AbsValExprs();
                aves.exprs.add(e);
                aves.setPos(e);
                RESULT = aves;
            :};

declarations ::=
        const_declarations_opt:consts
        type_declarations_opt:types
        var_declarations_opt:vars
        subroutine_declarations_opt:subs
        {:
            AbsDecls decls = new AbsDecls();
            decls.decls.addAll(consts.decls);
            decls.decls.addAll(types.decls);
            decls.decls.addAll(vars.decls);
            decls.decls.addAll(subs.decls);
            decls.setBeg(consts);
            decls.setEnd(subs);
            RESULT = decls;
        :}
        ;

const_declarations_opt ::=
            CONST const_declarations:d {: RESULT = d; :}
        |   eps:e
            {:
                AbsDecls ads = new AbsDecls();
                ads.setPos("", eleft, eright);
                RESULT = ads;
            :};

const_declarations ::=
            const_declarations:ds const_declaration:d
            {:
                ds.decls.add(d);
                ds.setEnd(d);
                RESULT = ds;
            :}
        |   const_declaration:d
            {:
                AbsDecls ds = new AbsDecls();
                ds.decls.add(d);
                ds.setBeg(d);
                ds.setEnd(d);
                RESULT = ds;
            :}
        ;

const_declaration ::=
            IDENTIFIER:name EQU val_expr:v SEMIC:s
            {:
                AbsDeclName adn = new AbsDeclName(name);
                adn.setPos(name, nameleft, nameright);
                
                AbsConstDecl d = new AbsConstDecl(adn, v);
                d.setBeg(name, nameleft, nameright);
                d.setEnd(v);
                RESULT = d;
            :};

type_declarations_opt ::=
            TYPE type_declarations:t {: RESULT = t; :}
        |   eps:e
            {:
                AbsDecls ads = new AbsDecls();
                ads.setPos("", eleft, eright);
                RESULT = ads;
            :};

type_declarations ::=
            type_declarations:ds type_declaration:d
            {:
                ds.decls.add(d);
                RESULT = ds;
            :}
        |   type_declaration:d
            {:
                AbsDecls ds = new AbsDecls();
                ds.decls.add(d);
                RESULT = ds;
            :};

type_declaration ::=
            IDENTIFIER:name EQU type_expr:type SEMIC
            {:
                AbsDeclName adn = new AbsDeclName(name);
                adn.setPos(name, nameleft, nameright);

                AbsTypeDecl atd = new AbsTypeDecl(adn, type);
                atd.setBeg(name, nameleft, nameright);
                atd.setEnd(type); 
                RESULT = atd;
            :};

var_declarations_opt ::=
            VAR var_declarations:vars {: RESULT = vars; :}
        |   eps:e
            {:
                AbsDecls ads = new AbsDecls();
                ads.setPos("", eleft, eright);
                RESULT = ads;
            :};

var_declarations ::=
            var_declarations:ds var_declaration:d
            {:
                ds.decls.add(d);
                ds.setEnd(d);
                RESULT = ds;
            :}
        |   var_declaration:d
            {:
                AbsDecls ds = new AbsDecls();
                ds.decls.add(d);
                ds.setPos(d);
                RESULT = ds;
            :};

var_declaration ::=
            IDENTIFIER:name COLON type_expr:type SEMIC:s
            {:
                AbsDeclName adn = new AbsDeclName(name);
                adn.setPos(name, nameleft, nameright);

                AbsVarDecl avd = new AbsVarDecl(adn, type);
                avd.setBeg(name, nameleft, nameright);
                avd.setEnd(type);
                RESULT = avd;
            :};

subroutine_declarations_opt ::=
            subroutine_declarations:decls {: RESULT = decls; :}
        |   eps:e
            {:
                AbsDecls ads = new AbsDecls();
                ads.setPos("", eleft, eright);
                RESULT = ads;
            :};

subroutine_declarations ::=
            subroutine_declarations:ds function_declaration:d
            {:
                ds.decls.add(d);
                RESULT = ds;
            :}
        |   subroutine_declarations:ds procedure_declaration:d
            {:
                ds.decls.add(d);
                RESULT = ds;
            :}
        |   function_declaration:d
            {:
                AbsDecls ds = new AbsDecls();
                ds.setPos(d);
                ds.decls.add(d);
                RESULT = ds;
            :}
        |   procedure_declaration:d
            {:
                AbsDecls ds = new AbsDecls();
                ds.setPos(d);
                ds.decls.add(d);
                RESULT = ds;
            :};

procedure_declaration ::=
            PROCEDURE:p IDENTIFIER:name LPARENTHESIS parameters:pars RPARENTHESIS SEMIC declarations:decls BEGIN:b stmt_opt:stmt END:e SEMIC
            {:
                AbsDeclName adn = new AbsDeclName(name);
                adn.setPos(name, nameleft, nameright);

                AbsBlockStmt abs = new AbsBlockStmt(stmt);
                abs.setBeg(b, bleft, bright);
                abs.setEnd(e, eleft, eright);

                AbsProcDecl apd = new AbsProcDecl(adn, pars, decls, abs);
                apd.setBeg(p, pleft, pright);
                apd.setEnd(e, eleft, eright);
                RESULT = apd;
            :};

function_declaration ::=
            FUNCTION:f IDENTIFIER:name LPARENTHESIS parameters:pars RPARENTHESIS COLON type_expr:type SEMIC declarations:decls BEGIN:b stmt_opt:stmt END:e SEMIC
            {:
                AbsDeclName adn = new AbsDeclName(name);
                adn.setPos(name, nameleft, nameright);

                AbsBlockStmt abs = new AbsBlockStmt(stmt);
                abs.setBeg(b, bleft, bright);
                abs.setEnd(e, eleft, eright);

                AbsFunDecl afd = new AbsFunDecl(adn, pars, type, decls, abs);
                afd.setBeg(f, fleft, fright);
                afd.setEnd(e, eleft, eright);
                RESULT = afd;
            :};

parameters ::=
            parameters:ps SEMIC parameter:p
            {:
                ps.decls.add(p);
                ps.setEnd(p);
                RESULT = ps;
            :}
        |   parameter:p
            {:
                AbsDecls ps = new AbsDecls();
                ps.setPos(p);
                ps.decls.add(p);
                RESULT = ps;
            :}
        |   eps:e
            {:
                AbsDecls ads = new AbsDecls();
                ads.setPos("", eleft, eright);
                RESULT = ads;
            :};

parameter ::=
            IDENTIFIER:name COLON type_expr:type
            {:
                AbsDeclName adn = new AbsDeclName(name);
                adn.setPos(name, nameleft, nameright);

                AbsVarDecl avd = new AbsVarDecl(adn, type);
                avd.setBeg(name, nameleft, nameright);
                avd.setEnd(type);
                RESULT = avd;
            :};

main_block ::=
            BEGIN:b stmt_opt:stmt END:e DOT:d
            {:
                AbsBlockStmt abs = new AbsBlockStmt(stmt);
                abs.setBeg(b, bleft, bright);
                abs.setEnd(e, eleft, eright);
                RESULT = abs;
            :};

stmt ::=
            BEGIN:b stmt_opt:stmt END:e
            {:
                AbsBlockStmt abs = new AbsBlockStmt(stmt);
                abs.setBeg(b, bleft, bright);
                abs.setEnd(e, eleft, eright);
                RESULT = abs;
            :}
        |   val_expr:expr 
            {:
                AbsExprStmt aes = new AbsExprStmt(expr);
                aes.setPos(expr);
                RESULT = aes;
            :}
        |   val_expr:lvalue ASSIGN val_expr:rvalue
            {:
                AbsAssignStmt aas = new AbsAssignStmt(lvalue, rvalue);
                aas.setBeg(lvalue);
                aas.setEnd(rvalue);
                RESULT = aas;
            :}
        |   if_stmt:s {: RESULT = s; :}
        |   while_stmt:s {: RESULT = s; :}
        |   for_stmt:s {: RESULT = s; :};

stmt_opt ::=
            stmt:s SEMIC stmt_opt:ss
            {:
                ss.stmts.add(0, s);
                ss.setBeg(s);
                RESULT = ss;
            :}
        |   stmt:s
            {:
                AbsStmts as = new AbsStmts();
                as.stmts.add(s);
                as.setPos(s);
                RESULT = as;
            :}
        |   error SEMIC stmt_opt:stmts
            {:
                RESULT = stmts;
                RESULT.error = true;
            :}
        |   eps:e 
            {: 
                AbsStmts as = new AbsStmts();
                as.setPos("", eleft, eright);
                RESULT = as;
            :};

if_stmt ::=
            IF:i val_expr:cond THEN stmt:then
            {:
                AbsStmts ass = new AbsStmts();
                ass.setPos("", then.endLine, then.endColumn);
                AbsBlockStmt abs = new AbsBlockStmt(ass);
                abs.setPos(ass);

                AbsIfStmt ais = new AbsIfStmt(cond, then, abs);
                ais.setBeg(i, ileft, iright);
                ais.setEnd(then);
                RESULT = ais;
            :}
        |   IF:i val_expr:cond THEN stmt:then ELSE stmt:els
            {:
                AbsIfStmt ais = new AbsIfStmt(cond, then, els);
                ais.setBeg(i, ileft, iright);
                ais.setEnd(els);
                RESULT = ais;
            :};

while_stmt ::=
            WHILE:w val_expr:cond DO stmt:stmt
            {:
                AbsWhileStmt aws = new AbsWhileStmt(cond, stmt);
                aws.setBeg(w, wleft, wright);
                aws.setEnd(stmt);
                RESULT = aws;
            :};

for_stmt ::=
            FOR:f IDENTIFIER:name ASSIGN val_expr:v1 TO val_expr:v2 DO stmt:stmt
            {:
                AbsValName avn = new AbsValName(name);
                avn.setPos(name, nameleft, nameright);

                AbsForStmt afs = new AbsForStmt(avn, v1, v2, stmt);
                afs.setBeg(f, fleft, fright);
                afs.setEnd(stmt);
                RESULT = afs;
            :};
